package main

import (
    "context"
    "log"
    "net"
    "math/rand"

    "google.golang.org/grpc"
    "github.com/gonetwork/proto"
)

type Pack struct {
    SeqNum, AckNum uint32;
    Message string;
    SYN, ACK, FIN bool;
}

type server struct {
    TCPHandshake.UnimplementedHandshakeServer
}

func (s *server) ConnSend(ctx context.Context, in *TCPHandshake.TCPPack) (*TCPHandshake.TCPPack, error) {
    if in.Status.SYN {
        log.Printf("New client is trying to establish an TCP connection...")
        ack := Pack{SeqNum: rand.Uint32(), AckNum: in.SeqNum+1, Message: "SYN+ACK", Status.SYN: true, Status.ACK: true}

        log.Printf("Sending response to client: (SeqNum: %v, AckNum: %v, SYN: %v, ACK: %v, Message: %v)", )
        return &TCPHandshake.TCPPack{
                 SeqNum: ack.SeqNum,
                 AckNum: ack.AckNum,
                 Message:ack.Message,
                 Status: &TCPHandshake
               }, nil
    }
    //log.Printf("Received: %v", in.Num)
    //return &TCPHandshake.ACK{Num: in.Num}, nil
}

func main() {
    lis, err := net.Listen("tcp", ":50051")
    if err != nil {
        log.Fatalf("failed to listen: %v", err)
    }
    s := grpc.NewServer()

    TCPHandshake.RegisterHandshakeServer(s, &server{})
    log.Printf("server listening at %v", lis.Addr())
    if err := s.Serve(lis); err != nil {
        log.Fatalf("failed to serve: %v", err)
    }
}
