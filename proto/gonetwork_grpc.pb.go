// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/gonetwork.proto

package TCPHandshake

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HandshakeClient is the client API for Handshake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandshakeClient interface {
	ConnSend(ctx context.Context, in *TCPPack, opts ...grpc.CallOption) (*TCPPack, error)
}

type handshakeClient struct {
	cc grpc.ClientConnInterface
}

func NewHandshakeClient(cc grpc.ClientConnInterface) HandshakeClient {
	return &handshakeClient{cc}
}

func (c *handshakeClient) ConnSend(ctx context.Context, in *TCPPack, opts ...grpc.CallOption) (*TCPPack, error) {
	out := new(TCPPack)
	err := c.cc.Invoke(ctx, "/TCPHandshake.Handshake/ConnSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandshakeServer is the server API for Handshake service.
// All implementations must embed UnimplementedHandshakeServer
// for forward compatibility
type HandshakeServer interface {
	ConnSend(context.Context, *TCPPack) (*TCPPack, error)
	mustEmbedUnimplementedHandshakeServer()
}

// UnimplementedHandshakeServer must be embedded to have forward compatible implementations.
type UnimplementedHandshakeServer struct {
}

func (UnimplementedHandshakeServer) ConnSend(context.Context, *TCPPack) (*TCPPack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnSend not implemented")
}
func (UnimplementedHandshakeServer) mustEmbedUnimplementedHandshakeServer() {}

// UnsafeHandshakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandshakeServer will
// result in compilation errors.
type UnsafeHandshakeServer interface {
	mustEmbedUnimplementedHandshakeServer()
}

func RegisterHandshakeServer(s grpc.ServiceRegistrar, srv HandshakeServer) {
	s.RegisterService(&Handshake_ServiceDesc, srv)
}

func _Handshake_ConnSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TCPPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandshakeServer).ConnSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TCPHandshake.Handshake/ConnSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandshakeServer).ConnSend(ctx, req.(*TCPPack))
	}
	return interceptor(ctx, in, info, handler)
}

// Handshake_ServiceDesc is the grpc.ServiceDesc for Handshake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Handshake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TCPHandshake.Handshake",
	HandlerType: (*HandshakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnSend",
			Handler:    _Handshake_ConnSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gonetwork.proto",
}
